diff --git a/src/backend/input.rs b/src/backend/input.rs
index 2838703..2fa1b9e 100644
--- a/src/backend/input.rs
+++ b/src/backend/input.rs
@@ -169,6 +169,9 @@ fn debug_print_hand(hand: &Pointer) {
                 hand.now.click_modifier_middle
             );
         }
+        if hand.now.yaw_reset != hand.before.yaw_reset {
+            log::debug!("Hand {}: yaw_reset {}", hand.idx, hand.now.yaw_reset);
+        }
     }
 }
 
@@ -236,6 +239,7 @@ pub struct PointerState {
     pub click_modifier_right: bool,
     pub click_modifier_middle: bool,
     pub move_mouse: bool,
+    pub yaw_reset: bool,
 }
 
 #[derive(Debug, Clone, Copy, Default)]
diff --git a/src/backend/openxr/input.rs b/src/backend/openxr/input.rs
index 947f345..9d22806 100644
--- a/src/backend/openxr/input.rs
+++ b/src/backend/openxr/input.rs
@@ -159,6 +159,7 @@ pub(super) struct OpenXrHandSource {
     move_mouse: CustomClickAction,
     scroll: xr::Action<Vector2f>,
     haptics: xr::Action<xr::Haptic>,
+    yaw_reset: CustomClickAction,
 }
 
 impl OpenXrInputSource {
@@ -392,6 +393,11 @@ impl OpenXrHand {
                 .space_reset
                 .state(pointer.before.space_reset, xr, session)?;
 
+        pointer.now.yaw_reset =
+            self.source
+                .yaw_reset
+                .state(pointer.before.yaw_reset, xr, session)?;
+
         Ok(())
     }
 }
@@ -431,6 +437,7 @@ impl OpenXrHandSource {
             modifier_middle: CustomClickAction::new(action_set, "click_modifier_middle", side)?,
             move_mouse: CustomClickAction::new(action_set, "move_mouse", side)?,
             haptics: action_haptics,
+            yaw_reset: CustomClickAction::new(action_set, "yaw_reset", side)?,
         })
     }
 }
@@ -627,6 +634,14 @@ fn suggest_bindings(instance: &xr::Instance, hands: &[&OpenXrHandSource; 2]) {
             instance
         );
 
+        add_custom!(
+            profile.yaw_reset,
+            &hands[0].yaw_reset,
+            &hands[1].yaw_reset,
+            bindings,
+            instance
+        );
+
         if instance
             .suggest_interaction_profile_bindings(profile_path, &bindings)
             .is_err()
@@ -663,6 +678,7 @@ struct OpenXrActionConfProfile {
     move_mouse: Option<OpenXrActionConfAction>,
     scroll: Option<OpenXrActionConfAction>,
     haptic: Option<OpenXrActionConfAction>,
+    yaw_reset: Option<OpenXrActionConfAction>,
 }
 
 const DEFAULT_PROFILES: &str = include_str!("openxr_actions.json5");
diff --git a/src/backend/openxr/openxr_actions.json5 b/src/backend/openxr/openxr_actions.json5
index 63c5e77..8967d47 100644
--- a/src/backend/openxr/openxr_actions.json5
+++ b/src/backend/openxr/openxr_actions.json5
@@ -108,6 +108,10 @@
       // used with focus_follows_mouse_mode
       left: "/user/hand/left/input/trigger/touch",
       right: "/user/hand/right/input/trigger/touch"
+    },
+    yaw_reset: {
+      double_click: true,
+      left: "/user/hand/left/input/y/click",
     }
   },
 
@@ -170,6 +174,10 @@
       // used with focus_follows_mouse_mode
       left: "/user/hand/left/input/trigger/touch",
       right: "/user/hand/right/input/trigger/touch"
+    },
+    yaw_reset: {
+      double_click: true,
+      left: "/user/hand/left/input/y/click",
     }
   },
 
@@ -209,6 +217,10 @@
     haptic: {
       left: "/user/hand/left/output/haptic",
       right: "/user/hand/right/output/haptic"
+    },
+    yaw_reset: {
+      double_click: true,
+      left: "/user/hand/left/input/y/click",
     }
   },
 
@@ -257,6 +269,10 @@
       left: "/user/hand/left/input/trackpad/dpad_down",
       right: "/user/hand/right/input/trackpad/dpad_down"
     },
+    yaw_reset: {
+      double_click: true,
+      left: "/user/hand/left/input/y/click",
+    },
   },
 
   // HP Reverb G2 controller
@@ -296,6 +312,10 @@
       double_click: true,
       right: "/user/hand/right/input/system/click",
     },
+    yaw_reset: {
+      double_click: true,
+      left: "/user/hand/left/input/y/click",
+    },
   },
 
 ]
diff --git a/src/backend/openxr/playspace.rs b/src/backend/openxr/playspace.rs
index e233083..10979bb 100644
--- a/src/backend/openxr/playspace.rs
+++ b/src/backend/openxr/playspace.rs
@@ -8,6 +8,9 @@ use crate::{
 
 use super::overlay::OpenXrOverlayData;
 
+use std::process::Command;
+use std::thread;
+
 struct MoverData<T> {
     pose: Affine3A,
     hand: usize,
@@ -51,6 +54,15 @@ impl PlayspaceMover {
         monado: &mut Monado,
     ) {
         for pointer in &state.input_state.pointers {
+            if pointer.now.yaw_reset && !pointer.before.yaw_reset {
+                log::info!("Yaw reset");
+                thread::spawn(|| {
+                    let _ = Command::new("/run/current-system/sw/bin/slimevr-cli")
+                        .arg("yaw")
+                        .spawn();
+                });
+            }
+
             if pointer.now.space_reset {
                 if !pointer.before.space_reset {
                     log::info!("Space reset");
